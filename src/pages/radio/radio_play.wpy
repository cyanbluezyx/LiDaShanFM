<template>
  <view class="play-container">
      <image src="../../images/avator.jpg" class="play-cover">

			</image>
			<view>
				<progress percent="{{curProcess}}" stroke-width="2" activeColor="#E8353B" backgroundColor="#DFDADA"></progress>
				<view class="process-time-container">
					<label>{{curTime}}</label>
					<label>{{totalDuration}}</label>
				</view>
			</view>
			<view class="audio-name">
				{{curAudio.title}}
			</view>
			<view>
				{{curAudio.author}}
			</view>
			<view class="audio-controls-container">
				<image src="../../images/icon-back.png" @tap="seek(-30)"></image>
				<image src="../../images/icon-last.png" @tap="turnAudio(-1)"></image>
				<image  class="icon-middle" src="{{playBtnSrc}}" @tap="playAudio"></image>
				<image src="../../images/icon-next.png" @tap="turnAudio(1)"></image>
				<image src="../../images/icon-forward.png" @tap="seek(30)"></image>
			</view>
  </view>
</template>
<script>
import wepy from 'wepy'
import api from '../../api/api'

import {AUDIO_PATH, CURRENT_AUDIO} from '../../utils/constant'

export default class RadioPlay extends wepy.page {
  config = {
      navigationBarBackgroundColor: "#332D2D",
      navigationBarTitleText: "正在播放",
      navigationBarTextStyle: "white",
      backgroundColor: "#332D2D"
	}
	
	data = {
		curAudio:{},
		myAudio:{},
		curProcess: 0,
		curTime: '00:00',
		totalDuration: '00:00',
		audioList: [],
		playBtnSrc: '../../images/icon-run.png',
		globalData: {}
	}

	watch = {
		curAudio (newValue, oldValue) {
			this.$parent.globalData.curAudio = newValue
			if(newValue === {}){
				wepy.removeStorageSync(CURRENT_AUDIO)
			}
			else{
				wepy.setStorageSync(CURRENT_AUDIO, newValue)
			}
		}
  }

	computed = {
	}
	
	methods = {
		playAudio() {
			if(this.globalData.backgroundAudioPlay.paused){
				this.globalData.backgroundAudioPlay.play()
				this.playBtnSrc = '../../images/icon-pause.png'
			}else{
				this.globalData.backgroundAudioPlay.pause()
				this.playBtnSrc = '../../images/icon-run.png'
			}
		},
		seek(time){
			let seektime = this.globalData.backgroundAudioPlay.currentTime + Number.parseInt(time)
			this.globalData.backgroundAudioPlay.seek(seektime)	
		},
		turnAudio(num) {
			let curIndex = this.audioList.findIndex((item) => {
				return (item.radioId == this.curAudio.radioId)
			}) + Number.parseInt(num)
			if(curIndex < this.audioList.length && curIndex >= 0){
				this.curAudio = this.audioList[curIndex]
			}else{
					this.curAudio = this.audioList[0]
			}
			this.wxAudioControls(this.curAudio)
			this.wxAudioSetContext(this.curAudio)
		}
	}

	onLoad(options) {
		this.globalData = this.$parent.globalData
		this.curAudio = Object.assign({},this.globalData.curAudio)
		this.wxAudioInit()
		//获取当前音频信息
		let item = JSON.parse(options.jsonStr)
		if(item.radioId !== undefined){
			this.curAudio = item
			//获取音频列表（用于控制上下首跳转）
			this.audioList = this.globalData.curAudioList
			this.wxAudioControls(this.curAudio)
		}
		this.wxAudioSetContext(this.curAudio)
		
	}

	wxAudioInit(){
		this.globalData.backgroundAudioPlay.onPlay(() => {
			this.playBtnSrc = '../../images/icon-pause.png'
		})
		this.globalData.backgroundAudioPlay.onStop(() => {
			this.playBtnSrc = '../../images/icon-run.png'
			this.globalData.curAudio = {}
		})
		this.globalData.backgroundAudioPlay.onPause(() => {
			this.playBtnSrc = '../../images/icon-run.png'
		})
		this.globalData.backgroundAudioPlay.onWaiting(() => {
			this.wxAudioUpdateProcess()
		})
		this.globalData.backgroundAudioPlay.onEnded(() => {
			let curIndex = this.audioList.findIndex((item) => {
				return (item.radioId == this.curAudio.radioId)
			}) + 1
			if(curIndex >= this.audioList.length){
				this.curAudio = this.audioList[0]
			}else{
				this.curAudio = this.audioList[curIndex]
			}
			this.wxAudioControls(this.curAudio)
			this.wxAudioSetContext(this.curAudio)
		})
		this.globalData.backgroundAudioPlay.onTimeUpdate(() => {
			this.wxAudioUpdateProcess()
		})
  }

  wxAudioControls(audio) {
    this.globalData.backgroundAudioPlay.title = audio.title
		this.globalData.backgroundAudioPlay.autoplay = true
		this.globalData.backgroundAudioPlay.src = AUDIO_PATH + audio.audioName
	}

	wxAudioSetContext(audio) {
		this.totalDuration = this.totalDurationFilter(audio.playLength)
		this.playBtnSrc = this.globalData.backgroundAudioPlay.paused ? '../../images/icon-run.png' : '../../images/icon-pause.png'
	}

  totalDurationFilter(time){
		return time.replace('分',':').replace('秒','')
	}

  durationFilter(time){
		let minute = Number.parseInt(time / 60).toString().padStart(2,'0'), 
				sec = Number.parseInt(time % 60).toString().padStart(2,'0')
		return `${minute}:${sec}`
	}

	wxAudioUpdateProcess() {
		this.curProcess = Number.parseInt(this.globalData.backgroundAudioPlay.currentTime * 100 / this.globalData.backgroundAudioPlay.duration)
		this.curTime = this.durationFilter(this.globalData.backgroundAudioPlay.currentTime)
		this.$apply()
	}
}
</script>
<style lang="less">
	page{
		background-color: #332D2D;
	}
	.play-container {
		text-align: center;
		.play-cover { 
			width:480rpx;
			height:480rpx;
			margin-top:30rpx;
		}
		.audio-name {
			font-size: 34rpx;
			color: white;
			padding: 20rpx 0rpx;
		}
		progress{
			padding: 20rpx 40rpx;
		}
		.process-time-container{
			padding: 0rpx 40rpx;
			display: flex;
			flex-direction: row;
			justify-content: space-between;
		}
		.audio-controls-container{
			padding: 40rpx 80rpx;
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
			image {
				width: 40rpx;
				height: 40rpx;
			}
			.icon-middle{
				width: 100rpx;
				height: 100rpx;
			}
		}
	}
</style>


